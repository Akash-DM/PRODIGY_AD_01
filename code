import 'package:flutter/material.dart';

void main() {
  runApp(const CalculatorApp());
}

class CalculatorApp extends StatelessWidget {
  const CalculatorApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'task 1',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: const CalculatorHomePage(),
    );
  }
}

class CalculatorHomePage extends StatefulWidget {
  const CalculatorHomePage({Key? key}) : super(key: key);

  @override
  _CalculatorHomePageState createState() => _CalculatorHomePageState();
}

class _CalculatorHomePageState extends State<CalculatorHomePage> {
  String output = "0";
  List<String> inputs = [];
  String currentNumber = "";

  void buttonPressed(String buttonText) {
    setState(() {
      if (buttonText == "CLEAR") {
        output = "0";
        currentNumber = "";
        inputs.clear();
      } else if (buttonText == "BACKSPACE") {
        if (currentNumber.isNotEmpty) {
          currentNumber = currentNumber.substring(0, currentNumber.length - 1);
          output = currentNumber.isEmpty ? "0" : currentNumber;
        }
      } else if (buttonText == "+" || buttonText == "-" || buttonText == "/" || buttonText == "X") {
        if (currentNumber.isNotEmpty) {
          inputs.add(currentNumber);
          inputs.add(buttonText);
          currentNumber = "";
        }
      } else if (buttonText == ".") {
        if (!currentNumber.contains(".")) {
          currentNumber += buttonText;
        }
      } else if (buttonText == "=") {
        if (currentNumber.isNotEmpty) {
          inputs.add(currentNumber);
        }
        double result = calculate();
        output = result % 1 == 0 ? result.toInt().toString() : result.toString();
        currentNumber = output;
        inputs.clear();
      } else {
        currentNumber += buttonText;
        output = currentNumber;
      }
    });
  }

  double calculate() {
    double result = double.parse(inputs[0]);
    for (int i = 1; i < inputs.length; i += 2) {
      String operator = inputs[i];
      double nextNumber = double.parse(inputs[i + 1]);

      if (operator == "+") {
        result += nextNumber;
      } else if (operator == "-") {
        result -= nextNumber;
      } else if (operator == "X") {
        result *= nextNumber;
      } else if (operator == "/") {
        result /= nextNumber;
      }
    }
    return result;
  }

  Widget buildButton(String buttonText, {Color textColor = Colors.white, Color backgroundColor = Colors.grey, Color borderColor = Colors.grey}) {
    return Expanded(
      child: Padding(
        padding: const EdgeInsets.all(4.0),
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: backgroundColor,
            foregroundColor: textColor,
            side: BorderSide(color: borderColor, width: 1.5),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8.0),
            ),
            padding: EdgeInsets.all(20.0),
            elevation: 0.0,
            textStyle: const TextStyle(fontSize: 22.0, fontWeight: FontWeight.bold),
          ),
          child: Text(buttonText),
          onPressed: () => buttonPressed(buttonText),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.black,
        elevation: 0,
      ),
      body: Container(
        color: Colors.black,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: <Widget>[
            Container(
              alignment: Alignment.centerRight,
              padding: const EdgeInsets.symmetric(vertical: 24.0, horizontal: 16.0),
              child: Container(
                decoration: BoxDecoration(
                  color: Colors.black,
                  borderRadius: BorderRadius.circular(12.0),
                ),
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 16.0),
                  child: Text(
                    output,
                    style: const TextStyle(
                      fontSize: 50.0,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
            ),
            Expanded(
              child: Divider(
                color: Colors.transparent,
              ),
            ),
            Column(
              children: <Widget>[
                Row(
                  children: <Widget>[
                    buildButton("7", backgroundColor: Colors.grey[800]!),
                    buildButton("8", backgroundColor: Colors.grey[800]!),
                    buildButton("9", backgroundColor: Colors.grey[800]!),
                    buildButton("/", backgroundColor: Colors.orange, borderColor: Colors.orange),
                  ],
                ),
                Row(
                  children: <Widget>[
                    buildButton("4", backgroundColor: Colors.grey[800]!),
                    buildButton("5", backgroundColor: Colors.grey[800]!),
                    buildButton("6", backgroundColor: Colors.grey[800]!),
                    buildButton("X", backgroundColor: Colors.orange, borderColor: Colors.orange),
                  ],
                ),
                Row(
                  children: <Widget>[
                    buildButton("1", backgroundColor: Colors.grey[800]!),
                    buildButton("2", backgroundColor: Colors.grey[800]!),
                    buildButton("3", backgroundColor: Colors.grey[800]!),
                    buildButton("-", backgroundColor: Colors.orange, borderColor: Colors.orange),
                  ],
                ),
                Row(
                  children: <Widget>[
                    buildButton("0", backgroundColor: Colors.grey[800]!),
                    buildButton(".", backgroundColor: Colors.grey[800]!),
                    buildButton("00", backgroundColor: Colors.grey[800]!),
                    buildButton("+", backgroundColor: Colors.orange, borderColor: Colors.orange),
                  ],
                ),
                Row(
                  children: <Widget>[
                    buildButton("CLEAR", backgroundColor: Colors.orange, borderColor: Colors.orange),
                    buildButton("=", backgroundColor: Colors.orange, borderColor: Colors.orange),
                  ],
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
